#!/bin/bash

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

############################################################
#
#       位置参量
#
############################################################
ARGUMENT1="$1"
ARGUMENT2="$2"
ARGUMENT3="$3"

set -eu
#set -x

if [[ "$(id -u)" != "0" ]]; then
        echo "Error: must run with root"
        exit 1
fi

############################################################
#
#       全局变量
#
############################################################
BACKUP_ROOT="/backup"
BACKUP_DIR="mysql"
BACKUP_TIME=$(date +"%Y-%m-%d-%H%M%S")
LOG_DIR="log"
LOG_FILE="backup-mysql.log"
MYSQL_ROOT="/usr/local/mysql"
COMMAND_LIST="mysql mysqld mysqldump mysqlbinlog mysqladmin"
MY_CNF="/root/.my.cnf"
MAX="10"

############################################################
#
#       处理变量
#
############################################################
if [[ -z "$ARGUMENT1" ]]; then
        ARGUMENT1="full"
fi

if [[ -z "$ARGUMENT2" ]]; then
        ARGUMENT2="backup"
fi

if [[ -z "$ARGUMENT3" ]]; then
        ARGUMENT3="list"
fi

############################################################
#
#       MySQL
#
############################################################
# 检测指令
for COMMAND in ${COMMAND_LIST}; do
        
        if ( ! type -p "$COMMAND" &> /dev/null ) && [[ -x "${MYSQL_ROOT}/bin/${COMMAND}" ]]; then
                ln -s ${MYSQL_ROOT}/bin/${COMMAND} /usr/local/bin/${COMMAND}
        fi
        
done

# 设置密码
if [[ ! -s "$MY_CNF" ]]; then
        echo "[mysqldump]" >> "$MY_CNF"
        echo "user=root" >> "$MY_CNF"
        echo "password=" >> "$MY_CNF"
        
        echo "Warning: Setting the password in ~/.my.cnf"
        exit 1
fi

# 检测密码
if ( grep "^password=.." "$MY_CNF" &> /dev/null ); then
        PASSWORD=$(grep "^password=.." "$MY_CNF" | awk -F= '{ print $2 }')
else
        echo "Error: Setting the password in ~/.my.cnf"
        exit 1
fi

# 创建目录
mkdir -p ${BACKUP_ROOT}/{"$BACKUP_DIR","$LOG_DIR"}

############################################################
#
#       主要函数
#
############################################################
ls_full()
{
        cd ${BACKUP_ROOT}/${BACKUP_DIR}
        
        ls -F | grep "^full-20[0-9\-]*.sql$" | sort -u
        
        cd - &> /dev/null
}

ls_incremental()
{
        cd ${BACKUP_ROOT}/${BACKUP_DIR}
        
        ls -F | grep "^incremental-20[0-9\-]*_full-20[0-9\-]*.sql$" | sort -u
        
        cd - &> /dev/null
}

incremental_var()
{
        if [[ -z "$(ls_full | xargs)" ]]; then
                echo "Error: full backup does not exist"
                exit 1
        fi
        
        FULL_BACKUP=$(ls_full | tail -n 1)
        FULL_BACKUP_PATH=${BACKUP_ROOT}/${BACKUP_DIR}/${FULL_BACKUP}
        
        BACKUP_BINLOG=$(grep "^\-- CHANGE MASTER TO MASTER_LOG_FILE" "$FULL_BACKUP_PATH" | awk -F\' '{ print $2 }')
        BACKUP_POSITION=$(grep "^\-- CHANGE MASTER TO MASTER_LOG_FILE" "$FULL_BACKUP_PATH" | awk -F= '{ print $3 }' | sed "s/;$//g")
        
        MYSQL_BINLOG=$(mysql -u root -p${PASSWORD} -e "show master status" 2> /dev/null | grep ".[0-9]\{6\}" | awk '{ print $1 }')
        MYSQL_POSITION=$(mysql -u root -p${PASSWORD} -e "show master status" 2> /dev/null | grep ".[0-9]\{6\}" | awk '{ print $2 }')
        
        if [[ -z "$MYSQL_BINLOG" ]] || [[ -z "$MYSQL_POSITION" ]] || [[ -z "$BACKUP_BINLOG" ]] || [[ -z "$BACKUP_POSITION" ]]; then
                echo "Error: variable is empty"
                exit 1
        fi
}

default()
{
        echo "backup-mysql: unrecognized option '$1'"
        
        echo "Usage: backup-mysql <incremental|full> <backup|restore> [list|DATE]"
        echo ""
        
        exit 1
}

# 完全备份
full_backup()
{
        mysqldump -u root --single-transaction --master-data=2 --routines --flush-logs --all-databases \
        > ${BACKUP_ROOT}/${BACKUP_DIR}/full-${BACKUP_TIME}.sql
}

# 完全恢复
full_restore()
{
        if [[ -s "${BACKUP_ROOT}/${BACKUP_DIR}/full-$1.sql" ]]; then
                mysql -u root -p${PASSWORD} < ${BACKUP_ROOT}/${BACKUP_DIR}/full-$1.sql
        else
                echo "Error: full backup does not exist"
                exit 1
        fi
}

# 增量备份
incremental_backup()
{
        if [[ -z "$(ls_full | xargs)" ]]; then
                full_backup
        fi
        
        for (( NUM=0; NUM < MAX; NUM++ )); do
                
                incremental_var
                
                if [[ "$BACKUP_BINLOG" == "$MYSQL_BINLOG" ]]; then
                        mysqlbinlog --start-position=${BACKUP_POSITION} --stop-position=${MYSQL_POSITION} \
                        ${MYSQL_ROOT}/var/${BACKUP_BINLOG} > ${BACKUP_ROOT}/${BACKUP_DIR}/incremental-${BACKUP_TIME}_${FULL_BACKUP}
                        
                        break 1
                else
                        full_backup
                fi
                
        done
        
        if [[ "$NUM" == "$MAX" ]]; then
                echo "Error: incremental backup failed"
                exit 1
        fi
}

# 增量恢复
incremental_restore()
{
        INCREMENTAL_BACKUP=$(ls_incremental | grep "^incremental-$1")
        
        if [[ -n "$INCREMENTAL_BACKUP" ]]; then
                mysql -u root -p${PASSWORD} < ${BACKUP_ROOT}/${BACKUP_DIR}/${INCREMENTAL_BACKUP}
        else
                echo "Error: incremental backup does not exist"
                exit 1
        fi
}

full_backup_list()
{
        ls_full | awk -F. '{ print $1 }' | sed "s/^full-//g"
}

incremental_backup_list()
{
        ls_incremental | awk -F_ '{ print $1 }' | sed "s/^incremental-//g"
}

############################################################
#
#       主要操作
#
############################################################
# 删除空的完全备份
if [[ -n "$(ls_full | xargs)" ]]; then
        for FULL_BACKUP in $(ls_full | xargs); do
                
                FULL_BACKUP_PATH=${BACKUP_ROOT}/${BACKUP_DIR}/${FULL_BACKUP}
                
                if ( ! grep "^\-- CHANGE MASTER TO MASTER_LOG_FILE" "$FULL_BACKUP_PATH" &> /dev/null ); then
                        rm -rf "$FULL_BACKUP_PATH"
                fi
                
        done
fi

case "$ARGUMENT1" in
        
        "full")
                
                case "$ARGUMENT2" in
                        
                        "backup")
                                full_backup 2>> ${BACKUP_ROOT}/${LOG_DIR}/${LOG_FILE}
                          ;;
                        
                        "restore")
                                
                                case "$ARGUMENT3" in
                                        
                                        "list")
                                                full_backup_list
                                          ;;
                                        
                                        20[1-3][0-9]-[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9])
                                                full_restore "$ARGUMENT3" 2>> ${BACKUP_ROOT}/${LOG_DIR}/${LOG_FILE}
                                          ;;
                                        
                                        *)
                                                default "$ARGUMENT3"
                                          ;;
                                        
                                esac
                                
                          ;;
                        
                        *)
                                default "$ARGUMENT2"
                          ;;
                        
                esac
                
          ;;
        
        "incremental")
                
                case "$ARGUMENT2" in
                        
                        "backup")
                                incremental_backup 2>> ${BACKUP_ROOT}/${LOG_DIR}/${LOG_FILE}
                          ;;
                        
                        "restore")
                                
                                case "$ARGUMENT3" in
                                        
                                        "list")
                                                incremental_backup_list
                                          ;;
                                        
                                        20[1-3][0-9]-[0-1][0-9]-[0-3][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9])
                                                incremental_restore "$ARGUMENT3" 2>> ${BACKUP_ROOT}/${LOG_DIR}/${LOG_FILE}
                                          ;;
                                        
                                        *)
                                                default "$ARGUMENT3"
                                          ;;
                                        
                                esac
                                
                          ;;
                        
                        *)
                                default "$ARGUMENT2"
                          ;;
                        
                esac
                
          ;;
        
        *)
                default "$ARGUMENT1"
          ;;
        
esac
